plugins {
    id 'com.android.library'
}

android {
    namespace 'com.termux.x11'
    compileSdk 34

    defaultConfig {
        targetSdk 34
        minSdk 26
        buildConfigField "String", "COMMIT", "\"" + ("git rev-parse HEAD\n".execute().getText().trim() ?: (System.getenv('CURRENT_COMMIT') ?: "NO_COMMIT")) + "\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    if (isWindows()||isMacOS()){
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
    }else{
        externalNativeBuild {
            cmake {
                path "src/main/cpp/CMakeLists.txt"
                version "3.22.1"
            }
        }
    }
    splits {
        abi {
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging false
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildFeatures.aidl true
    buildFeatures.buildConfig true
    buildToolsVersion '34.0.0'
    ndkVersion '25.1.8937393'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.23"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    compileOnly project(':shell-loader:stub')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'
    implementation 'org.tukaani:xz:1.7'
    implementation 'org.apache.commons:commons-compress:1.20'

}

static def isWindows() {
    println(System.properties['os.name']);
    return System.properties['os.name'].contains('windows');
}

static def isMacOS() {
    println(System.properties['os.name']);
    return System.properties['os.name'].contains('Mac OS X');
}
afterEvaluate {
    tasks.register("generatePrefs") {
        //noinspection UnnecessaryQualifiedReference
        def xml = groovy.xml.DOMBuilder.parse((new StringReader(file('src/main/res/xml/preferences.xml').text)))
        def preferenceNodes = xml.documentElement.getElementsByTagName("*")
        def preferences = []

        for (int i = 0; i < preferenceNodes.length; i++) {
            def node = preferenceNodes.item(i)
            if (node.nodeName == 'EditTextPreference' && node.getAttribute("app:key") != "extra_keys_config")
                preferences << [ type: 'String',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'SeekBarPreference')
                preferences << [ type: 'Int', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'ListPreference') {
                def entries = node.getAttribute("app:entries")
                def values = node.getAttribute("app:entryValues")
                preferences << [type: 'List', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue"),
                                entries: entries.substring(7, entries.length()), values: values.substring(7, values.length())]
            }
            else if (node.nodeName == 'SwitchPreferenceCompat')
                preferences << [ type: 'Boolean',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
        }

        def out = file('build/generated/java/com/termux/x11/Prefs.java')
        out.getParentFile().exists() || out.getParentFile().mkdirs()
        out.delete()
        out.createNewFile()

        out << 'package com.termux.x11;\n'
        out << 'import java.util.HashMap;\n'
        out << 'import android.content.Context;\n'
        out << 'import com.termux.x11.utils.TermuxX11ExtraKeys;\n'
        out << '\n'
        out << 'public class Prefs extends LoriePreferences.PrefsProto {\n'
        preferences.each {
            if (it.type == 'Int' || it.type == 'Boolean')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", ${it.default});\n"
            else if (it.type == 'String')
                out << "  public final StringPreference ${it.key} = new StringPreference(\"${it.key}\", \"${it.default}\");\n"
            else if (it.type == 'List')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", \"${it.default}\", R.array.${it.entries}, R.array.${it.values});\n"
        }
        out << '  public final StringPreference extra_keys_config = new StringPreference("extra_keys_config", TermuxX11ExtraKeys.DEFAULT_IVALUE_EXTRA_KEYS);\n'
        out << '  public final HashMap<String, Preference> keys = new HashMap<>() {{\n'
        preferences.each { out << '    put("' + it.key + '", ' + it.key + ');\n' }
        out << '    put("extra_keys_config", extra_keys_config);\n'
        out << '  }};\n'
        out << '\n'
        out << '  public Prefs(Context ctx) {\n'
        out << '    super(ctx);\n'
        out << '  }\n'
        out << '}\n'
    }
    android.sourceSets.main.java.srcDirs += 'build/generated/java'
    preBuild.dependsOn generatePrefs
}
